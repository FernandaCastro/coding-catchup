//#1 - Sort 10 schools around your house by distance:
        Insertion sort: small amount of data Space complex: O(1)

//#2 - eBay sorts listings by the current Bid amount:
       Radix or Counting sort: a bid is a fixed range of number ($1 till $200) and not a very large numbers of bids on eBay.

//#3 - Sport scores on ESPN
        Quick sort: large amount of data for many sport types, also it avoids memory issues.

//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data
        Quick sort: better space complexity than Merge sort.
        Merge sort: sorting it externally due to memory limitation and avoid the quick sort worst case scenario

//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews
        Insertion sort: almost sorted data, although it could be a huge amount of data.

//#6 - Temperature Records for the past 50 years in Canada
        Radix or Counting sort: supposing the temperature records are integers, no decimal numbers.
        Quick sort: to avoid memory expensive usage.

//#7 - Large user name database needs to be sorted. Data is very random.
        Quick sort: in memory process.

//#8 - You want to teach sorting for the first time
        Bubble sort/Selection sort

//Traversals:  BFS vs. DFS
//If you know a solution is not far from the root of the tree:
        BFS, since it explores closer nodes first

//If the tree is very deep and solutions are rare:
        BFS (DFS can take too long).

//If the tree is very wide:
        DFS (BFS will consume too much memory.)

//If solutions are frequent but located deep in the tree:
        DFS, since it explores deeper nodes first.

//Determining whether a path exists between two nodes:
        DFS (That's what it was made for)

//Finding the shortest path:
        BFS (That's what it was made for)
